#version 450

layout (location = 0) uniform uint stage;

struct Pixel {
	float r, g, b;
};

layout (std430, binding = 0) buffer PIXELS {
	Pixel pixels[];
};

layout (std430, binding = 1) buffer SWAP_PIXELS {
	Pixel swapPixels[];
};

uniform sampler2D screenTexture;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void copy() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uint index = coords.y * 2560 + coords.x;
	
	vec3 color = texelFetch(screenTexture, coords, 0).rgb;
	
	pixels[index].r = color.r;
	pixels[index].g = color.g;
	pixels[index].b = color.b;
}

void work() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uint index = gl_GlobalInvocationID.y * 2560 + gl_GlobalInvocationID.x;
	float r = 0.0f, g = 0.0f, b = 0.0f;
	for(int x = -1; x <= 1; ++x)
		for(int y = -1; y <= 1; ++y) {
			uint otherIndex = (coords.y + y) * 2560 + (coords.x + x);
			r += pixels[otherIndex].r;
			g += pixels[otherIndex].g;
			b += pixels[otherIndex].b;
		}
	swapPixels[index].r = r / 9.0f;
	swapPixels[index].g = g / 9.0f;
	swapPixels[index].b = b / 9.0f;
}

void swap() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uint index = coords.y * 2560 + coords.x;
	
	pixels[index].r = swapPixels[index].r;
	pixels[index].g = swapPixels[index].g;
	pixels[index].b = swapPixels[index].b;
}

void main() {
	if(stage == 0)
		copy();
	else if(stage == 1)
		work();
	else
		swap();
}