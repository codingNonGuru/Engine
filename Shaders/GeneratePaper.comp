#version 450
#extension GL_ARB_compute_variable_group_size: enable

layout (location = 0) uniform int stage;
layout (location = 1) uniform uvec2 size;
layout (location = 2) uniform int filterSize;
layout (location = 3) uniform vec3 baseColor;

layout (std430, binding = 0) buffer DIFFUSE {
	vec4 diffuse[];
};

layout (std430, binding = 1) buffer PERLIN {
	float perlin[];
};

layout (std430, binding = 2) buffer EDGE_BLUR {
	float edgeBlur[];
};

layout (std430, binding = 3) buffer EDGE_BLUR_SWAP {
	float edgeBlurBuffer[];
};

layout (std430, binding = 4) buffer FILTER {
	float weights[];
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void clear() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint index = y * size.x + x;
	
	float alpha = 1.0f;
	if(x < 20 || x > size.x - 20 || y < 20 || y > size.y - 20)
		alpha = 0.0f;
	diffuse[index] = vec4(baseColor.r, baseColor.g, baseColor.b, alpha);
}

void horizontalBlur() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint thisIndex = y * size.x + x;

	float sum = 0.0f;
	for(int i = -filterSize; i <= filterSize; ++i) {
		uint otherX = int(gl_GlobalInvocationID.x) + i;
		uint otherY = gl_GlobalInvocationID.y;
		uint otherIndex = otherY * size.x + otherX;
		float finalValue = diffuse[otherIndex].w;
		if(otherX < 0 || otherX >= size.x)
			finalValue = 0.0f;
		sum += weights[i + filterSize] * finalValue; 	
	}
	edgeBlur[thisIndex] = sum;
}

void verticalBlur() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint thisIndex = y * size.x + x;

	float sum = 0.0f;
	for(int i = -filterSize; i <= filterSize; ++i) {
		uint otherX = gl_GlobalInvocationID.x;
		uint otherY = int(gl_GlobalInvocationID.y) + i;
		uint otherIndex = otherY * size.x + otherX;
		float finalValue = edgeBlur[otherIndex];
		if(otherY < 0 || otherY >= size.y)
			finalValue = 0.0f;
		sum += weights[i + filterSize] * finalValue; 	
	}
	edgeBlurBuffer[thisIndex] = sum;
	//diffuse[thisIndex].w = (sum + perlin[thisIndex] * 2.0f > 1.5f ? 1.0f : 0.0f);
}

void main() {
	if(stage == 0)
		clear();
	else if(stage == 1)
		horizontalBlur();
	else if(stage == 2)
		verticalBlur();		
}
